<template>
  <a-card>
    <Heading :name="invitationName">
      <a-button type="primary" @click="handlePreview">
        <i :class="['iconfont', 'icon-yulancopy']"></i>
        预览
      </a-button>
      <a-button type="primary" @click="handleSubmit" :disabled="isConnect">
        <i :class="['iconfont', 'icon-baocun']"></i>
        保存
      </a-button>
    </Heading>

    <a-form
      layout="horizontal"
      :form="form"
      class="es-form es-form-bk"
      @keydown.native.enter.prevent="handleSubmit"
    >
      <a-row>
        <a-col :md="16" :sm="24">
          <a-form-item label="标题" v-bind="BASE.twoItemLayout">
            <a-input
              v-decorator="[
                `noticeTitle`,
                {
                  maxLength: 50,
                  initialValue: formData.noticeTitle,
                  validateTrigger: ['blur'],
                  rules: [{ required: true, message: '请输入标题' }]
                }
              ]"
              placeholder="请输入"
              allowClear
            />
          </a-form-item>
        </a-col>
      </a-row>
      <a-row>
        <a-col :md="24" :sm="24">
          <a-form-item label="内容" v-bind="BASE.threeItemLayout">
            <tinymce
              v-if="tinymceRefresh"
              v-model="formData.noticeContext"
              :height="300"
            />
          </a-form-item>
        </a-col>
      </a-row>
    </a-form>
  </a-card>
</template>
<script>
import { mapGetters } from "vuex";
import Heading from "@/components/heading/Heading";
import Tinymce from "@/components/Tinymce";
import {
  findSendTenderNotice,
  addSendTenderNotice,
  updateSendTenderNotice
} from "@/services/bid";

export default {
  name: "tender-invitation",
  components: { Tinymce, Heading },
  props: {
    invitationName: {
      type: [String],
      default: "邀请函"
    }
  },
  data() {
    return {
      form: this.$form.createForm(this),
      formData: {},
      isConnect: false,
      tenderNoticeId: "",
      tinymceRefresh: true
    };
  },
  computed: {
    ...mapGetters("account", ["dictionary"]),
    tenderVindicateId() {
      return this.$route.params.id;
    },
    projectId() {
      return this.$route.query.projectId;
    }
  },
  watch: {
    pushSystem: {
      handler(val) {
        return val;
      },
      immediate: true,
      deep: true
    }
  },
  created() {
    this.handleGetData();
  },
  activated() {
    this.handleGetData();
  },
  methods: {
    //  邀请函预览
    handlePreview() {
      this.$router.push({
        path: `/invitation-preview/${this.formData.tenderVindicateId}`,
        query: {
          formData: JSON.stringify(this.formData)
        }
      });
    },
    // 获取数据
    handleGetData() {
      findSendTenderNotice(this.tenderVindicateId).then(res => {
        const resData = res.data;
        if (resData.errCode === "0000") {
          const { responseResult } = resData;
          this.formData = responseResult || {};
          this.tinymceRefresh = false;
          this.$nextTick(() => {
            this.tinymceRefresh = true;
          });
        } else {
          this.$error({
            title: "错误提示",
            content: this.BASE.handleErrorMsg(resData)
          });
        }
      });
    },
    // 保存
    handleSubmit(e) {
      e.preventDefault();
      this.form.validateFieldsAndScroll(
        this.BASE.formScrollOptions,
        (error, values) => {
          if (error) {
            return;
          }
          for (let i in values) {
            if (i != "pushSystem") {
              this.formData[i] = values[i];
            }
          }
          this.isConnect = true;
          this.formData.tenderVindicateId = this.tenderVindicateId;
          this.formData.projectId = this.projectId;
          // noticeType 1:公告 2:邀请函
          this.formData.noticeType = 2;
          if (this.formData.tenderNoticeId) {
            this.handleUpdate();
          } else {
            this.handleAdd();
          }
        }
      );
    },
    // 新增
    handleAdd() {
      addSendTenderNotice(this.formData).then(res => {
        const resData = res.data;
        if (resData.errCode === "0000") {
          const { responseResult } = resData;
          this.formData = responseResult || {};
          this.$message.success("保存成功");
          this.handleGetData();
        } else {
          this.$error({
            title: "错误提示",
            content: this.BASE.handleErrorMsg(resData)
          });
        }
        this.isConnect = false;
      });
    },
    // 更新
    handleUpdate() {
      updateSendTenderNotice(this.formData).then(res => {
        const resData = res.data;
        if (resData.errCode === "0000") {
          const { responseResult } = resData;
          this.$message.success(responseResult);
          this.handleGetData();
        } else {
          this.$error({
            title: "错误提示",
            content: this.BASE.handleErrorMsg(resData)
          });
        }
        this.isConnect = false;
      });
    }
  }
};
</script>
