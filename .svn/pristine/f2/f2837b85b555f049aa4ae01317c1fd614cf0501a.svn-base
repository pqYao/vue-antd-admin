<template>
  <div class="standard-table">
    <a-table
      size="small"
      :bordered="bordered"
      :loading="loading"
      :columns="columns"
      :scroll="{ x: true }"
      :dataSource="dataSource"
      :rowKey="rowKey"
      :pagination="pagination"
      @change="onChange"
      :rowSelection="
        selectedRows
          ? {
              fixed: true,
              selectedRowKeys: selectedRowKeys,
              onChange: updateSelect
            }
          : undefined
      "
    >
      <template
        slot-scope="text, record, index"
        :slot="slot"
        v-for="slot in Object.keys($scopedSlots).filter(
          key => key !== 'expandedRowRender'
        )"
      >
        <slot :name="slot" v-bind="{ text, record, index }"></slot>
      </template>
      <template :slot="slot" v-for="slot in Object.keys($slots)">
        <slot :name="slot"></slot>
      </template>
      <template
        slot-scope="record, index, indent, expanded"
        :slot="$scopedSlots.expandedRowRender ? 'expandedRowRender' : ''"
      >
        <slot
          v-bind="{ record, index, indent, expanded }"
          :name="$scopedSlots.expandedRowRender ? 'expandedRowRender' : ''"
        ></slot>
      </template>
    </a-table>
  </div>
</template>

<script>
export default {
  name: "StandardTable",
  props: {
    bordered: {
      type: [Boolean, Function],
      default: true
    },
    loading: [Boolean, Object],
    columns: Array,
    dataSource: Array,
    rowKey: {
      type: [String, Function],
      default: "key"
    },
    pagination: {
      type: [Object, Boolean],
      default: false
    },
    selectedRows: Array
  },
  data() {
    return {
      needTotalList: []
    };
  },
  methods: {
    updateSelect(selectedRowKeys, selectedRows) {
      this.$emit("update:selectedRows", selectedRows);
      this.$emit("selectedRowChange", selectedRowKeys, selectedRows);
    },
    onChange(pagination, filters, sorter, { currentDataSource }) {
      this.$emit("change", pagination, filters, sorter, { currentDataSource });
    }
  },
  watch: {
    selectedRows(selectedRows) {
      this.needTotalList = this.needTotalList.map(item => {
        return {
          ...item,
          total: selectedRows.reduce((sum, val) => {
            return sum + val[item.dataIndex];
          }, 0)
        };
      });
    }
  },
  computed: {
    selectedRowKeys() {
      return this.selectedRows.map(record => {
        return typeof this.rowKey === "function"
          ? this.rowKey(record)
          : record[this.rowKey];
      });
    }
  }
};
</script>

<style scoped lang="less">
.standard-table {
  .alert {
    margin-bottom: 16px;
    .message {
      a {
        font-weight: 600;
      }
    }
    .clear {
      float: right;
    }
  }
}
</style>
