<template>
  <div>
    <a-card>
      <Heading name="查询结果"> </Heading>
      <a-table
        size="small"
        :loading="pageData.loading"
        :pagination="false"
        :columns="columns"
        :dataSource="dataSource"
        :customRow="rowClick"
        :rowSelection="{
          fixed: true,
          type: 'radio',
          selectedRowKeys: selectedRowKeys,
          onChange: onSelectChange
        }"
        :scroll="{ x: true }"
        rowKey="templateId"
      >
      </a-table>
      <pagination
        :value="pageData.page"
        :pageSize="pageData.limit"
        v-show="pageData.total > 0"
        :total="pageData.total"
        @change="sizeChange"
        @showSizeChange="pageChange"
      ></pagination>
    </a-card>
  </div>
</template>

<script>
import { mapGetters } from "vuex";
import Heading from "@/components/heading/Heading";
import Pagination from "@/components/pagination/Pagination";
import { findTemplateInfoByPage } from "@/services/basic";

const pageData = {
  limit: 10,
  total: 0,
  page: 1,
  loading: false
};

const columns = [
  {
    title: "序号",
    dataIndex: "number",
    align: "center",
    customRender: (text, record, index) =>
      `${(pageData.page - 1) * pageData.limit + index + 1}`,
    width: 80
  },
  {
    title: "模板类型",
    dataIndex: "templateType",
    align: "center"
  },
  {
    title: "模板名称",
    dataIndex: "templateName",
    align: "center"
  },
  {
    title: "模板创建时间",
    dataIndex: "createDate",
    align: "center"
  },
  {
    title: "模板创建人",
    dataIndex: "createName",
    align: "center"
  }
];

export default {
  name: "notice-case-select",
  components: { Heading, Pagination },
  data() {
    return {
      columns,
      dataSource: [],
      selectedRowKeys: [],
      selectedRows: [],
      pageData: pageData
    };
  },
  computed: {
    ...mapGetters("account", ["dictionary", "user"])
  },
  created() {
    this.getData();
  },
  activated() {
    this.getData();
  },
  methods: {
    getData() {
      let param = Object.assign({
        limit: this.pageData.limit,
        page: this.pageData.page
      });
      this.pageData.loading = true;
      findTemplateInfoByPage(param).then(res => {
        const resData = res.data;
        const responseResult = res.data.responseResult;
        if (resData.errCode == "0000") {
          const { data, total } = responseResult;
          this.dataSource = data;
          this.pageData.total = Number(total);
        } else {
          this.$error({
            title: "错误提示",
            content: this.BASE.handleErrorMsg(resData)
          });
        }
        this.pageData.loading = false;
      });
    },
    onSelectChange(data, row) {
      this.selectedRowKeys = data;
      this.selectedRows = row;
    },
    sizeChange(page, pageSize) {
      this.pageData.page = page;
      this.pageData.limit = pageSize;
      this.getData();
    },
    pageChange(current, size) {
      this.pageData.page = current;
      this.pageData.limit = size;
      this.getData();
    },
    getRes() {
      return this.selectedRows[0];
    },
    //行点击
    rowClick(data) {
      return {
        on: {
          click: () => {
            let keys = data.templateId;
            this.selectedRowKeys = [keys];
            this.selectedRows = [data];
          }
        }
      };
    }
  }
};
</script>
