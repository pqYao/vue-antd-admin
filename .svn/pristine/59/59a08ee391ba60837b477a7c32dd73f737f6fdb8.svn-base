<template>
  <div>
    <a-card>
      <Heading name="产品明细">
        <template v-if="!this.isDetail && subcontractDataLength != 0">
          <a-button type="primary" @click="handleAdd('product')">
            关联产品
          </a-button>
          <a-popconfirm
            :title="
              this.hasSelectedRowKeys ? '请选择要删除的数据。' : '确定批量删除?'
            "
            ok-text="确认"
            cancel-text="取消"
            @confirm="handleDelete"
          >
            <a-button type="primary">
              <i :class="['iconfont', 'icon-weibiaoti544']"></i>
              批量删除
            </a-button>
          </a-popconfirm>
          <a-button type="primary" @click="handleSubmit">
            <i :class="['iconfont', 'icon-baocun']" :disabled="isConnect"></i>
            保存
          </a-button>
        </template>
      </Heading>
      <a-table
        class="es-table"
        size="small"
        :bordered="true"
        :loading="pageData.loading"
        :pagination="false"
        :columns="columns"
        :dataSource="dataSource"
        rowKey="scontractingDetailId"
        :rowSelection="
          isDetail
            ? null
            : {
                fixed: true,
                selectedRowKeys: selectedRowKeys,
                onChange: onSelectChange
              }
        "
        :scroll="{ x: true }"
      >
        <template slot="amount" slot-scope="text, record, index">
          <a-form v-if="!isDetail" :form="form" @submit="handleSubmit">
            <a-form-item>
              <a-input
                allowClear
                v-decorator="[
                  `amount${index}`,
                  {
                    validateTrigger: ['blur'],
                    rules: [{ required: true, validator: checkAmount }],
                    initialValue: text
                  }
                ]"
                @change="
                  e =>
                    onCellChange(
                      e.target.value,
                      record.scontractingDetailId,
                      'amount'
                    )
                "
                style="margin: -5px 0;width:100%"
              />
            </a-form-item>
          </a-form>
          <span v-else>{{ text }}</span>
        </template>

        <template slot="action" slot-scope="record">
          <a-popconfirm
            title="是否确认删除所选行?"
            ok-text="确认"
            cancel-text="取消"
            @confirm="deleteById(record.scontractingDetailId)"
          >
            <a style="margin-right: 8px">删除</a>
          </a-popconfirm>
        </template>
      </a-table>
      <pagination
        v-if="this.isDetail"
        :value="pageData.page"
        :pageSize="pageData.limit"
        v-show="pageData.total > 0"
        :total="pageData.total"
        @change="sizeChange"
        @showSizeChange="pageChange"
      ></pagination>
    </a-card>
    <a-modal
      title="选择产品"
      width="80%"
      :centered=true
      v-if="productVisible"
      v-model="productVisible"
      @ok="handleOk('product')"
    >
      <ProductSelect ref="product"></ProductSelect>
    </a-modal>
  </div>
</template>

<script>
import Heading from "@/components/heading/Heading";
import {
  findSubContractForDetail,
  deleteSubContractDetail,
  relevanceSubContractDetailProduct,
  updateSubContractDetail
} from "@/services/bid";
import Pagination from "@/components/pagination/Pagination";
import ProductSelect from "./ProductSelect";

const pageData = {
  limit: 15,
  total: 0,
  page: 1,
  loading: false
};

const columns = [
  {
    title: "序号",
    dataIndex: "number",
    align: "center",
    width: 80,
    customRender: (text, record, index) =>
      `${(pageData.page - 1) * pageData.limit + index + 1}`
  },
  {
    title: "标名",
    dataIndex: "subtenderName",
    align: "center"
  },
  {
    title: "包名",
    dataIndex: "subcontractingName",
    align: "center"
  },
  {
    title: "产品编码",
    dataIndex: "productCode",
    align: "center"
  },
  {
    title: "产品名称",
    dataIndex: "productName",
    align: "center"
  },
  {
    title: "单位",
    dataIndex: "measure",
    align: "center"
  },
  {
    title: "总数量",
    dataIndex: "totalAmount",
    align: "center"
  },
  {
    title: "需求数量",
    dataIndex: "amount",
    scopedSlots: { customRender: "amount" },
    align: "center"
  },
  {
    title: "操作",
    align: "center",
    scopedSlots: { customRender: "action" },
    fixed: "right",
    width: 80
  }
];

const dataSource = [];

export default {
  name: "sub-contract-product",
  components: { Heading, Pagination, ProductSelect },
  props: {
    isDetail: {
      type: Boolean,
      default: false
    },
    subcontractDataLength: {
      type: Number
    }
  },
  data() {
    return {
      form: this.$form.createForm(this),
      columns: columns,
      dataSource: dataSource,
      selectedRowKeys: [],
      selectedRows: [],
      projectId: this.$route.params.id,
      isConnect: false,
      productVisible: false,
      pageData: pageData
    };
  },
  watch: {
    isDetail: {
      handler(val) {
        if (val) {
          const newColumns = [...this.columns];
          delete newColumns[8];
          this.columns = newColumns;
        }
        return val;
      },
      immediate: true,
      deep: true
    }
  },
  computed: {
    hasSelectedRowKeys() {
      return !!this.selectedRowKeys.length == 0 ? 1 : 0;
    }
  },
  created() {
    this.getData();
  },
  methods: {
    getData() {
      let param = Object.assign(
        {
          limit: this.isDetail ? this.pageData.limit : 10000,
          page: this.pageData.page,
          projectId: this.projectId
        },
        this.filter
      );
      this.dataSource = [];
      this.pageData.loading = true;
      findSubContractForDetail(param).then(res => {
        const resData = res.data;
        const responseResult = res.data.responseResult;
        if (resData.errCode == "0000") {
          const { data, total } = responseResult;
          this.dataSource = data;
          this.pageData.total = Number(total);
        } else {
          this.$error({
            content: this.BASE.handleErrorMsg(resData)
          });
        }
        this.pageData.loading = false;
      });
    },
    handleAdd(key) {
      this[`${key}Visible`] = true;
    },
    handleOk(key) {
      const data = this.$refs[key].getRes();
      relevanceSubContractDetailProduct(this.projectId, data.join(",")).then(
        res => {
          const resData = res.data;
          if (resData.errCode === "0000") {
            const { responseResult } = resData;
            this.$message.success(responseResult, 3);
            this.getData();
          } else {
            this.$error({
              content: this.BASE.handleErrorMsg(resData)
            });
          }
        }
      );
      this[`${key}Visible`] = false;
    },
    checkAmount(rule, value, callback) {
      if (!this.BASE.CheckIsNullOrEmpty(value)) {
        callback("请输入需求数量");
        return;
      }
      let reg = this.BASE.reg.mountReg;
      if (!reg.test(value)) {
        callback("请输入正确的数量");
      }
      callback();
    },
    onCellChange(value, key, column) {
      const newData = [...this.dataSource];
      const target = newData.filter(
        item => key === item.scontractingDetailId
      )[0];
      if (target) {
        target[column] = value;
        this.dataSource = newData;
      }
    },
    handleSubmit(e) {
      e.preventDefault(e);
      this.form.validateFieldsAndScroll(this.BASE.formScrollOptions,error => {
        if (error) {
          return;
        }
        this.isConnect = true;
        this.updateInfo();
      });
    },
    // 更新
    updateInfo() {
      updateSubContractDetail(this.dataSource).then(res => {
        const resData = res.data;
        if (resData.errCode === "0000") {
          this.$message.success(resData.responseResult, 3);
          this.isConnect = false;
          this.getData();
        } else {
          this.$error({
            content: this.BASE.handleErrorMsg(resData)
          });
        }
      });
    },
    onSelectChange(data, row) {
      this.selectedRowKeys = data;
      this.selectedRows = row;
    },
    handleDelete() {
      if (this.hasSelectedRowKeys) {
        return;
      }
      this.deleteById();
    },
    // 删除
    deleteById(id) {
      let scontractingDetailIds = id || this.selectedRowKeys.join(",");
      deleteSubContractDetail(scontractingDetailIds).then(res => {
        const resData = res.data;
        if (resData.errCode === "0000") {
          const { responseResult } = resData;
          this.$message.warning(responseResult);
          this.selectedRowKeys = [];
          this.getData();
        }
      });
    },
    sizeChange(page, pageSize) {
      this.pageData.page = page;
      this.pageData.limit = pageSize;
      this.getData();
    },
    pageChange(current, size) {
      this.pageData.page = current;
      this.pageData.limit = size;
      this.getData();
    }
  }
};
</script>
